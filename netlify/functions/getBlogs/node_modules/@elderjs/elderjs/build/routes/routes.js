"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-cond-assign */
/* eslint-disable no-param-reassign */
/* eslint-disable global-require */
/* eslint-disable import/no-dynamic-require */
const glob_1 = __importDefault(require("glob"));
const lodash_kebabcase_1 = __importDefault(require("lodash.kebabcase"));
const regexparam_1 = __importDefault(require("regexparam"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
const wrapPermalinkFn_1 = __importDefault(require("../utils/wrapPermalinkFn"));
const windowsPathFix_1 = __importDefault(require("../utils/windowsPathFix"));
const makeDynamicPermalinkFn_1 = __importDefault(require("./makeDynamicPermalinkFn"));
const requireFile = (file) => {
    const dataReq = require(file);
    return dataReq.default || dataReq;
};
function prepareRoutes(settings) {
    try {
        const { ssrComponents: ssrFolder, serverPrefix = '' } = settings.$$internal;
        const files = glob_1.default.sync(`${settings.srcDir}/routes/*/+(*.js|*.svelte)`).map((p) => windowsPathFix_1.default(p));
        const routejsFiles = files.filter((f) => f.endsWith('/route.js'));
        const routes = {};
        /**
         * Set Defaults in Route.js files
         * Add them to the 'routes' object
         */
        routejsFiles.forEach((routeFile) => {
            const routeName = routeFile.replace('/route.js', '').split('/').pop();
            const route = requireFile(routeFile);
            route.$$meta = {
                type: 'file',
                addedBy: routeFile,
            };
            const filesForThisRoute = files
                .filter((r) => r.includes(`/routes/${routeName}`))
                .filter((r) => !r.includes('route.js'));
            if (!route.name) {
                route.name = routeName;
            }
            // handle string based permalinks
            if (typeof route.permalink === 'string') {
                const routeString = `${serverPrefix}${route.permalink}`;
                route.permalink = makeDynamicPermalinkFn_1.default(route.permalink);
                route.$$meta = {
                    ...route.$$meta,
                    routeString,
                    ...regexparam_1.default.parse(routeString),
                    type: route.dynamic ? `dynamic` : 'static',
                };
            }
            // set default permalink if it doesn't exist.
            if (!route.permalink) {
                route.permalink = ({ request }) => (request.slug === '/' ? request.slug : `/${request.slug}/`);
            }
            route.permalink = wrapPermalinkFn_1.default({ permalinkFn: route.permalink, routeName, settings });
            // set default all()
            if (!Array.isArray(route.all) && typeof route.all !== 'function') {
                if (routeName.toLowerCase() === 'home') {
                    route.all = [{ slug: '/' }];
                }
                else {
                    route.all = [{ slug: lodash_kebabcase_1.default(routeName) }];
                }
            }
            // set default data as it is optional.
            if (!route.data) {
                route.data = (page) => {
                    page.data = {};
                };
            }
            // find svelte template or set default
            if (!route.template) {
                const defaultLocation = path_1.default.resolve(settings.srcDir, `./routes/${routeName}/${routeName}.svelte`);
                const svelteFile = filesForThisRoute.find((f) => f.toLowerCase().endsWith(windowsPathFix_1.default(defaultLocation.toLowerCase())));
                if (!svelteFile) {
                    console.error(`No template for route named "${routeName}". Expected to find it at: ${path_1.default.resolve(settings.srcDir, defaultLocation)}. If you are using a different template please define it in your route.js file.`);
                }
                route.template = defaultLocation;
            }
            // set default layout
            if (!route.layout) {
                route.layout = `Layout.svelte`;
            }
            routes[routeName] = route;
        });
        const ssrComponents = glob_1.default.sync(`${ssrFolder}/**/*.js`).map((p) => windowsPathFix_1.default(p));
        Object.keys(routes).forEach((routeName) => {
            const ssrTemplate = ssrComponents.find((f) => {
                const suffix = routes[routeName].template
                    .toLowerCase()
                    .replace('.svelte', '.js')
                    .replace(settings.srcDir.toLowerCase(), '');
                return f.toLowerCase().endsWith(windowsPathFix_1.default(suffix));
            });
            if (!ssrTemplate) {
                console.error(`No SSR template found for ${routeName}. Expected at ${routes[routeName].template.replace('.svelte', '.js')}. Make sure rollup finished running.`);
            }
            const ssrLayout = ssrComponents.find((f) => {
                const suffix = routes[routeName].layout
                    .toLowerCase()
                    .replace('.svelte', '.js')
                    .replace(settings.srcDir.toLowerCase(), '');
                return f.toLowerCase().endsWith(windowsPathFix_1.default(suffix));
            });
            if (!ssrLayout) {
                console.error(`No SSR Layout found for ${routeName}. Expected at ${routes[routeName].layout.replace('.svelte', '.js')}. Make sure rollup finished running.`);
            }
            routes[routeName].templateComponent = utils_1.svelteComponent(routes[routeName].template, 'routes');
            routes[routeName].layoutComponent = utils_1.svelteComponent(routes[routeName].layout, 'layouts');
        });
        return routes;
    }
    catch (e) {
        console.error(e);
        return {};
    }
}
exports.default = prepareRoutes;
