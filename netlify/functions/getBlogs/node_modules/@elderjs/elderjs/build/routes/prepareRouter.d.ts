import { RequestOptions } from '../utils/types';
import { RouteOptions } from './types';
export declare function extractDynamicRouteParams({ path, $$meta }: {
    path: any;
    $$meta: any;
}): {};
interface IGetDynamicRoute {
    path: string;
    dynamicRoutes: RouteOptions[];
}
export declare function getDynamicRoute({ path, dynamicRoutes }: IGetDynamicRoute): RouteOptions | false;
declare type Req = {
    path: string;
    query?: any;
    search?: string;
};
interface IFindPrebuildRequest {
    req: Req;
    serverLookupObject: any;
}
export declare const findPrebuiltRequest: ({ req, serverLookupObject }: IFindPrebuildRequest) => RequestOptions | false;
export declare const needsElderRequest: ({ req, prefix }: {
    req: any;
    prefix: any;
}) => boolean;
export declare const initialRequestIsWellFormed: (request: RequestOptions) => boolean;
interface IRequestFromDynamicRoute {
    req: Req;
    dynamicRoutes: RouteOptions[];
    requestCache: Map<string, RequestOptions>;
}
export declare function requestFromDynamicRoute({ req, dynamicRoutes, requestCache, }: IRequestFromDynamicRoute): RequestOptions | false;
declare function prepareRouter(Elder: any): ({ req, res, next, request: initialRequest }: {
    req: any;
    res: any;
    next: any;
    request: any;
}) => Promise<any>;
export default prepareRouter;
