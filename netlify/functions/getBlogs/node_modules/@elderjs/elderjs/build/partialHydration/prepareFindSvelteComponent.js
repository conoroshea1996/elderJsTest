"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeHash = void 0;
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const windowsPathFix_1 = __importDefault(require("../utils/windowsPathFix"));
const removeHash = (pathWithHash) => {
    const parsed = path_1.default.parse(pathWithHash);
    const parts = parsed.name.split('.');
    if (parts.length > 1) {
        const out = pathWithHash.replace(`.${parts.pop()}`, '');
        return out;
    }
    return pathWithHash;
};
exports.removeHash = removeHash;
const prepareFindSvelteComponent = ({ ssrFolder, rootDir, clientComponents: clientFolder, distDir }) => {
    const rootDirFixed = windowsPathFix_1.default(rootDir);
    const ssrComponents = glob_1.default.sync(`${ssrFolder}/**/*.js`).map(windowsPathFix_1.default);
    const clientComponents = glob_1.default
        .sync(`${clientFolder}/**/*.js`)
        .map((c) => windowsPathFix_1.default(`${path_1.default.sep}${path_1.default.relative(distDir, c)}`));
    const cache = new Map();
    const findComponent = (name, folder) => {
        const nameFixed = windowsPathFix_1.default(name);
        const cacheKey = JSON.stringify({ name, folder });
        if (cache.has(cacheKey))
            return cache.get(cacheKey);
        // abs path first
        if (nameFixed.includes(rootDirFixed)) {
            const rel = windowsPathFix_1.default(path_1.default.relative(path_1.default.join(rootDirFixed, 'src'), name))
                .replace('.svelte', '.js')
                .toLowerCase();
            const parsed = path_1.default.parse(rel);
            const ssr = ssrComponents.find((c) => c.toLowerCase().endsWith(rel));
            const client = windowsPathFix_1.default(clientComponents.find((c) => exports.removeHash(c).toLowerCase().endsWith(rel)));
            const iife = windowsPathFix_1.default(clientComponents
                .filter((c) => c.includes('iife'))
                .find((c) => exports.removeHash(c).toLowerCase().endsWith(parsed.base)));
            const out = { ssr, client, iife };
            cache.set(cacheKey, out);
            return out;
        }
        // component name and folder only
        const ssr = ssrComponents
            .filter((c) => c.includes(folder))
            .find((c) => path_1.default.parse(c).name.toLowerCase() === name.replace('.svelte', '').toLowerCase());
        const client = windowsPathFix_1.default(clientComponents
            .filter((c) => c.includes(folder))
            .find((c) => path_1.default.parse(exports.removeHash(c)).name.toLowerCase() === name.replace('.svelte', '').toLowerCase()));
        const iife = windowsPathFix_1.default(clientComponents
            .filter((c) => c.includes('iife'))
            .find((c) => exports.removeHash(c.toLowerCase()).endsWith(`${name.toLowerCase().replace('.svelte', '')}.js`)));
        const out = { ssr, client, iife };
        cache.set(cacheKey, out);
        return out;
    };
    return findComponent;
};
exports.default = prepareFindSvelteComponent;
