import type { RoutesOptions } from '../routes/types';
import type { HookOptions } from '../hooks/types';
import type { ShortcodeDefs } from '../shortcodes/types';
import Page from './Page';
declare type ServerOptions = {
    prefix: string;
};
declare type BuildOptions = {
    numberOfWorkers: number;
    shuffleRequests: boolean;
};
export interface SvelteComponentFiles {
    ssr: string | undefined;
    client: string | undefined;
    iife: string | undefined;
}
export interface FindSvelteComponent {
    (name: any, folder: any): SvelteComponentFiles;
}
declare type Internal = {
    hashedComponents?: {};
    ssrComponents: string;
    clientComponents: string;
    distElder: string;
    logPrefix: string;
    serverPrefix: string;
    findComponent: FindSvelteComponent;
    publicCssFile?: string;
};
declare type DebugOptions = {
    stacks: boolean;
    hooks: boolean;
    performance: boolean;
    build: boolean;
    automagic: boolean;
    shortcodes: boolean;
    props: boolean;
};
declare type PropOptions = {
    compress: boolean;
    replacementChars: string;
    hydration: 'html' | 'hybrid' | 'file';
};
export declare type InitializationOptions = {
    distDir?: string;
    srcDir?: string;
    rootDir?: string;
    origin?: string;
    prefix?: string;
    lang?: string;
    server?: ServerOptions;
    build?: BuildOptions;
    debug?: DebugOptions;
    plugins?: any;
    props?: PropOptions;
    hooks?: {
        disable?: string[];
    };
    shortcodes?: {
        openPattern?: string;
        closePattern?: string;
    };
    context?: string;
    worker?: boolean;
};
export declare type SettingsOptions = {
    version: string;
    prefix: string;
    distDir: string;
    srcDir: string;
    rootDir: string;
    origin: string;
    lang: string;
    server: ServerOptions | false;
    build: BuildOptions | false;
    debug: DebugOptions;
    plugins?: any;
    props: PropOptions;
    hooks: {
        disable?: string[];
    };
    shortcodes: {
        openPattern: string;
        closePattern: string;
    };
    $$internal: Internal;
    context?: string;
    worker?: boolean;
    css: 'none' | 'file' | 'inline' | 'lazy';
};
export declare type QueryOptions = {
    db?: any;
};
export declare type ExternalHelperRequestOptions = {
    helpers: [];
    query: QueryOptions;
    settings: SettingsOptions;
};
export declare type ReqDetails = {
    path?: string;
    query?: any;
    search?: string;
};
export declare type RequestOptions = {
    slug?: string;
    route: string;
    type: string;
    permalink: string;
    req?: ReqDetails;
};
export declare type RequestsOptions = {
    [name: string]: RequestOptions;
};
export interface Timing {
    name: string;
    duration: number;
}
export interface BuildResult {
    timings: Array<Timing[]>;
    errors: any[];
}
export declare type StackItem = {
    source: string;
    string: string;
    priority: number;
};
export declare type Stack = Array<StackItem>;
interface Init {
    (input: any): any;
}
export declare type PluginOptions = {
    name: string;
    description: string;
    init: Init | any;
    routes?: RoutesOptions;
    hooks: Array<HookOptions>;
    config?: Object;
    shortcodes?: ShortcodeDefs;
    minimumElderjsVersion?: string;
};
export declare type ExcludesFalse = <T>(x: T | false) => x is T;
export declare type HydrateOptions = {
    loading?: 'lazy' | 'eager' | 'none';
    preload?: boolean;
    threshold?: number;
    rootMargin?: string;
};
export interface ComponentPayload {
    page: Page;
    props: any;
    hydrateOptions?: HydrateOptions;
}
export interface RollupDevOptions {
    splitComponents: boolean;
}
export interface RollupSettings {
    svelteConfig?: any;
    replacements?: Object;
    dev?: RollupDevOptions;
}
export {};
