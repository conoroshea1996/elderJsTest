"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const shortcodes_1 = __importDefault(require("@elderjs/shortcodes"));
const createReadOnlyProxy_1 = __importDefault(require("./createReadOnlyProxy"));
// TODO: Needs TS magic.
function prepareShortcodeParser({ shortcodes, helpers, data, settings, request, query, allRequests, cssStack, headStack, customJsStack, }) {
    const { openPattern, closePattern } = settings.shortcodes;
    const shortcodeParser = shortcodes_1.default({ openPattern, closePattern });
    shortcodes.forEach((shortcode) => {
        if (typeof shortcode.run !== 'function')
            throw new Error(`Shortcodes must have a run function. Problem code: ${JSON.stringify(shortcode)}`);
        if (typeof shortcode.shortcode !== 'string')
            throw new Error(`Shortcodes must have a shortcode property to define their usage. Problem code: ${JSON.stringify(shortcode)}`);
        shortcodeParser.add(shortcode.shortcode, async (props, content) => {
            const shortcodeResponse = await shortcode.run({
                props,
                content,
                plugin: shortcode.plugin,
                data: createReadOnlyProxy_1.default(data, 'data', `${shortcode.shortcode} defined by ${JSON.stringify(shortcode.$$meta)}`),
                request: createReadOnlyProxy_1.default(request, 'request', `${shortcode.shortcode} defined by ${JSON.stringify(shortcode.$$meta)}`),
                query: createReadOnlyProxy_1.default(query, 'query', `${shortcode.shortcode} defined by ${JSON.stringify(shortcode.$$meta)}`),
                helpers: createReadOnlyProxy_1.default(helpers, 'helpers', `${shortcode.shortcode} defined by ${JSON.stringify(shortcode.$$meta)}`),
                settings: createReadOnlyProxy_1.default(settings, 'settings', `${shortcode.shortcode} defined by ${JSON.stringify(shortcode.$$meta)}`),
                allRequests: createReadOnlyProxy_1.default(allRequests, 'allRequests', `${shortcode.shortcode} defined by ${JSON.stringify(shortcode.$$meta)}`),
            });
            if (settings.debug.shortcodes) {
                console.log(`${shortcode.shortcode} returned`, shortcodeResponse);
            }
            if (typeof shortcodeResponse === 'object') {
                const { html, css, js, head } = shortcodeResponse;
                if (css) {
                    cssStack.push({
                        source: `${shortcode.shortcode} shortcode`,
                        string: css,
                    });
                }
                if (js) {
                    customJsStack.push({
                        source: `${shortcode.shortcode} shortcode`,
                        string: js,
                    });
                }
                if (head) {
                    headStack.push({
                        source: `${shortcode.shortcode} shortcode`,
                        string: head,
                    });
                }
                return html || '';
            }
            return shortcodeResponse || '';
        });
    });
    return shortcodeParser;
}
exports.default = prepareShortcodeParser;
