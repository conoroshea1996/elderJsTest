"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/no-dynamic-require */
const cosmiconfig_1 = require("cosmiconfig");
const lodash_defaultsdeep_1 = __importDefault(require("lodash.defaultsdeep"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_get_1 = __importDefault(require("lodash.get"));
const validations_1 = require("./validations");
const prepareFindSvelteComponent_1 = __importDefault(require("../partialHydration/prepareFindSvelteComponent"));
const normalizePrefix_1 = __importDefault(require("./normalizePrefix"));
function getConfig(initializationOptions = {}) {
    let loadedConfig = {};
    const explorerSync = cosmiconfig_1.cosmiconfigSync('elder');
    const explorerSearch = explorerSync.search();
    if (explorerSearch && explorerSearch.config) {
        loadedConfig = explorerSearch.config;
    }
    const config = lodash_defaultsdeep_1.default(initializationOptions, loadedConfig, validations_1.getDefaultConfig());
    const serverPrefix = normalizePrefix_1.default(config.prefix || lodash_get_1.default(config, 'server.prefix', ''));
    const rootDir = config.rootDir === 'process.cwd()' ? process.cwd() : path_1.default.resolve(config.rootDir);
    config.rootDir = rootDir;
    config.srcDir = path_1.default.resolve(rootDir, `./${config.srcDir}`);
    config.distDir = path_1.default.resolve(rootDir, `./${config.distDir}`);
    // eslint-disable-next-line global-require
    const pkgJson = require(path_1.default.resolve(__dirname, '../../package.json'));
    config.version = pkgJson.version.includes('-') ? pkgJson.version.split('-')[0] : pkgJson.version;
    config.context = typeof initializationOptions.context !== 'undefined' ? initializationOptions.context : 'unknown';
    config.server = initializationOptions.context === 'server' && config.server;
    config.build = initializationOptions.context === 'build' && config.build;
    config.worker = !!initializationOptions.worker;
    config.prefix = serverPrefix;
    config.server = serverPrefix ? { prefix: serverPrefix } : false;
    const ssrComponents = path_1.default.resolve(config.rootDir, './___ELDER___/compiled/');
    const clientComponents = path_1.default.resolve(config.distDir, `.${serverPrefix}/_elderjs/svelte/`);
    const distElder = path_1.default.resolve(config.distDir, `.${serverPrefix}/_elderjs/`);
    fs_extra_1.default.ensureDirSync(path_1.default.resolve(distElder));
    fs_extra_1.default.ensureDirSync(path_1.default.resolve(clientComponents));
    config.$$internal = {
        ssrComponents,
        clientComponents,
        distElder,
        logPrefix: `[Elder.js]:`,
        serverPrefix,
        findComponent: prepareFindSvelteComponent_1.default({
            ssrFolder: ssrComponents,
            rootDir,
            clientComponents,
            distDir: config.distDir,
        }),
    };
    if (config.css === 'file' || config.css === 'lazy') {
        const assetPath = path_1.default.resolve(distElder, `.${path_1.default.sep}assets`);
        fs_extra_1.default.ensureDirSync(path_1.default.resolve(assetPath));
        const cssFiles = fs_extra_1.default.readdirSync(assetPath).filter((f) => f.endsWith('.css'));
        if (cssFiles.length > 1) {
            throw new Error(`${config.$$internal.logPrefix} Race condition has caused multiple css files in ${assetPath}. If you keep seeing this delete the _elder and ___ELDER___  folders.`);
        }
        if (cssFiles[0]) {
            config.$$internal.publicCssFile = `${serverPrefix}/_elderjs/assets/${cssFiles[0]}`;
        }
        else {
            console.error(`CSS file not found in ${assetPath}`);
        }
    }
    if (config.origin === '') {
        console.error(`WARN: Remember to put a valid "origin" in your elder.config.js. This should be a fully qualified domain. This is frequently used by plugins and leaving it blank can cause SEO headaches.`);
    }
    return config;
}
exports.default = getConfig;
