import { ShortcodeDefs } from '../shortcodes/types';
import { QueryOptions, Stack, RequestOptions, SettingsOptions, HydrateOptions } from './types';
import { RoutesOptions } from '../routes/types';
interface SvelteCss {
    cssMap: String;
    css: String;
}
export interface IComponentToHydrate {
    name: string;
    hydrateOptions: HydrateOptions;
    client: any;
    props: false | any;
    id: string;
    prepared?: {
        clientPropsString?: string;
        clientPropsUrl?: string;
        propsString?: string;
    };
}
declare class Page {
    uid: string;
    runHook: (string: any, Object: any) => Promise<any>;
    next: () => void;
    resNext: () => void;
    shouldSkipRequest: boolean;
    allRequests: Array<RequestOptions>;
    request: RequestOptions;
    settings: SettingsOptions;
    helpers: {};
    data: Object;
    route: any;
    query: QueryOptions;
    errors: any[];
    routes: RoutesOptions;
    processStack: any;
    perf: any;
    layoutHtml: string;
    templateHtml: string;
    cssString: string;
    svelteCss: Array<SvelteCss>;
    htmlString: string;
    bodyAttributesString: string;
    htmlAttributesString: string;
    bodyAttributesStack: Stack;
    htmlAttributesStack: Stack;
    moduleStack: Stack;
    moduleJsStack: Stack;
    headStack: Stack;
    cssStack: Stack;
    beforeHydrateStack: Stack;
    hydrateStack: Stack;
    customJsStack: Stack;
    footerStack: Stack;
    shortcodes: ShortcodeDefs;
    componentsToHydrate: IComponentToHydrate[];
    constructor({ request, settings, next, query, helpers, data, route, runHook, allRequests, routes, errors, shortcodes, }: {
        request: any;
        settings: any;
        next?: () => void;
        query: any;
        helpers: any;
        data: any;
        route: any;
        runHook: any;
        allRequests: any;
        routes: any;
        errors: any;
        shortcodes: any;
    });
    build(): Promise<any>;
    html(): string | Promise<any>;
}
export default Page;
