"use strict";
/* eslint-disable import/no-dynamic-require */
// reload the build process when svelte files are added clearing the cache.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackagesWithSvelte = exports.getSvelteConfig = void 0;
// server that reloads the app which watches the file system for changes.
// reload can also be called after esbuild finishes the rebuild.
// the file watcher should restart the entire esbuild process when a new svelte file is seen. This includes clearing caches.
const esbuild_1 = require("esbuild");
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const esbuildPluginSvelte_1 = __importDefault(require("./esbuildPluginSvelte"));
const __1 = require("..");
const rollupPlugin_1 = require("../rollup/rollupPlugin");
const getPluginLocations_1 = __importDefault(require("../utils/getPluginLocations"));
const production = process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'PRODUCTION';
function getSvelteConfig(elderConfig) {
    const svelteConfigPath = path_1.default.resolve(elderConfig.rootDir, `./svelte.config.js`);
    if (fs_extra_1.default.existsSync(svelteConfigPath)) {
        try {
            // eslint-disable-next-line import/no-dynamic-require
            const req = require(svelteConfigPath);
            if (req) {
                return req;
            }
        }
        catch (err) {
            if (err.code === 'MODULE_NOT_FOUND') {
                console.warn(`Unable to load svelte.config.js from ${svelteConfigPath}`, err);
            }
            return false;
        }
    }
    return false;
}
exports.getSvelteConfig = getSvelteConfig;
function getPackagesWithSvelte(pkg, elderConfig) {
    const pkgs = []
        .concat(pkg.dependents ? Object.keys(pkg.dependents) : [])
        .concat(pkg.devDependencies ? Object.keys(pkg.devDependencies) : []);
    const sveltePackages = pkgs.reduce((out, cv) => {
        try {
            const resolved = path_1.default.resolve(elderConfig.rootDir, `./node_modules/${cv}/package.json`);
            const current = require(resolved);
            if (current.svelte) {
                out.push(cv);
            }
        }
        catch (e) {
            //
        }
        return out;
    }, []);
    return sveltePackages;
}
exports.getPackagesWithSvelte = getPackagesWithSvelte;
const getRestartHelper = (startOrRestartServer) => {
    let state;
    const defaultState = { ssr: false, client: false };
    const resetState = () => {
        state = JSON.parse(JSON.stringify(defaultState));
    };
    resetState();
    // eslint-disable-next-line consistent-return
    return (type) => {
        if (type === 'start') {
            return startOrRestartServer();
        }
        if (type === 'reset') {
            return resetState();
        }
        state[type] = true;
        if (state.ssr && state.client) {
            startOrRestartServer();
            resetState();
        }
    };
};
// eslint-disable-next-line consistent-return
const svelteHandler = async ({ elderConfig, svelteConfig, replacements, restartHelper }) => {
    try {
        const builders = {};
        // eslint-disable-next-line global-require
        const pkg = require(path_1.default.resolve(elderConfig.rootDir, './package.json'));
        const globPath = path_1.default.resolve(elderConfig.rootDir, `./src/**/*.svelte`);
        const initialEntryPoints = glob_1.default.sync(globPath);
        const sveltePackages = getPackagesWithSvelte(pkg, elderConfig);
        const elderPlugins = getPluginLocations_1.default(elderConfig);
        builders.ssr = await esbuild_1.build({
            entryPoints: [...initialEntryPoints, ...elderPlugins.files],
            bundle: true,
            outdir: elderConfig.$$internal.ssrComponents,
            plugins: [
                esbuildPluginSvelte_1.default({
                    type: 'ssr',
                    sveltePackages,
                    elderConfig,
                    svelteConfig,
                }),
            ],
            watch: {
                onRebuild(error) {
                    restartHelper('ssr');
                    if (error)
                        console.error('ssr watch build failed:', error);
                },
            },
            format: 'cjs',
            target: ['node12'],
            platform: 'node',
            sourcemap: !production,
            minify: production,
            outbase: 'src',
            external: pkg.dependents ? [...Object.keys(pkg.dependents)] : [],
            define: {
                'process.env.componentType': "'server'",
                'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
                ...replacements,
            },
        });
        builders.client = await esbuild_1.build({
            entryPoints: [...initialEntryPoints.filter((i) => i.includes('src/components')), ...elderPlugins.files],
            bundle: true,
            outdir: elderConfig.$$internal.clientComponents,
            entryNames: '[dir]/[name].[hash]',
            plugins: [
                esbuildPluginSvelte_1.default({
                    type: 'client',
                    sveltePackages,
                    elderConfig,
                    svelteConfig,
                }),
            ],
            watch: {
                onRebuild(error) {
                    if (error)
                        console.error('client watch build failed:', error);
                    restartHelper('client');
                },
            },
            format: 'esm',
            target: ['es2020'],
            platform: 'node',
            sourcemap: !production,
            minify: true,
            splitting: true,
            chunkNames: 'chunks/[name].[hash]',
            logLevel: 'error',
            outbase: 'src',
            define: {
                'process.env.componentType': "'browser'",
                'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
                ...replacements,
            },
        });
        restartHelper('start');
        const restart = async () => {
            if (builders.ssr)
                await builders.ssr.stop();
            if (builders.client)
                await builders.client.stop();
            restartHelper('reset');
            return svelteHandler({
                elderConfig,
                svelteConfig,
                replacements,
                restartHelper,
            });
        };
        return restart;
    }
    catch (e) {
        console.error(e);
    }
};
const esbuildBundler = async ({ initializationOptions = {}, replacements = {} } = {}) => {
    try {
        const elderConfig = __1.getElderConfig(initializationOptions);
        const svelteConfig = getSvelteConfig(elderConfig);
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { startOrRestartServer, startWatcher, childProcess } = rollupPlugin_1.devServer({
            forceStart: true,
            elderConfig,
        });
        const restartHelper = getRestartHelper(startOrRestartServer);
        if (!fs_extra_1.default.existsSync(path_1.default.resolve('./node_modules/intersection-observer/intersection-observer.js'))) {
            throw new Error(`Missing 'intersection-observer' dependency. Run 'npm i --save intersection-observer' to fix.`);
        }
        esbuild_1.buildSync({
            format: 'iife',
            minify: true,
            watch: false,
            outfile: path_1.default.resolve(elderConfig.prefix ? path_1.default.join(elderConfig.distDir, elderConfig.prefix) : elderConfig.distDir, `./static/intersection-observer.js`),
            entryPoints: [path_1.default.resolve('./node_modules/intersection-observer/intersection-observer.js')],
        });
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const restartEsbuild = await svelteHandler({
            elderConfig,
            svelteConfig,
            replacements,
            restartHelper,
        });
        startWatcher();
    }
    catch (e) {
        console.log(e);
    }
};
exports.default = esbuildBundler;
