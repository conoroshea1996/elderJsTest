"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const del_1 = __importDefault(require("del"));
const crypto_1 = __importDefault(require("crypto"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const rollupPlugin_1 = require("../rollup/rollupPlugin");
function md5(string) {
    return crypto_1.default.createHash('md5').update(string).digest('hex');
}
/**
 * Convert a warning or error emitted from the svelte compiler for esbuild.
 */
function convertWarning(source, { message, filename, start, end }, level) {
    if (level === 'warning') {
        if (message.includes('Unused CSS selector'))
            return false;
    }
    if (!start || !end) {
        return { text: message };
    }
    const lines = source.split(/\r\n|\r|\n/);
    const lineText = lines[start.line - 1];
    const location = {
        file: filename,
        line: start.line,
        column: start.column,
        length: (start.line === end.line ? end.column : lineText.length) - start.column,
        lineText,
    };
    return { text: message, location };
}
function esbuildPluginSvelte({ type, svelteConfig, elderConfig, sveltePackages = [] }) {
    return {
        name: 'esbuild-plugin-elderjs',
        setup(build) {
            try {
                // clean out old css files
                build.onStart(() => {
                    if (type === 'ssr') {
                        del_1.default.sync(elderConfig.$$internal.ssrComponents);
                        del_1.default.sync(path_1.resolve(elderConfig.$$internal.distElder, `.${path_1.sep}assets${path_1.sep}`));
                        del_1.default.sync(path_1.resolve(elderConfig.$$internal.distElder, `.${path_1.sep}props${path_1.sep}`));
                    }
                    else if (type === 'client') {
                        del_1.default.sync(path_1.resolve(elderConfig.$$internal.distElder, `.${path_1.sep}svelte${path_1.sep}`));
                    }
                });
                if (sveltePackages.length > 0) {
                    const filter = sveltePackages.length > 1
                        ? new RegExp(`(${sveltePackages.join('|')})`)
                        : new RegExp(`${sveltePackages[0]}`);
                    build.onResolve({ filter }, ({ path, importer }) => {
                        // below largely adapted from the rollup svelte plugin
                        // ----------------------------------------------
                        if (!importer || path[0] === '.' || path[0] === '\0' || path_1.isAbsolute(path))
                            return null;
                        // if this is a bare import, see if there's a valid pkg.svelte
                        const parts = path.split('/');
                        let dir;
                        let pkg;
                        let name = parts.shift();
                        if (name[0] === '@') {
                            name += `/${parts.shift()}`;
                        }
                        try {
                            const file = `.${path_1.sep}${['node_modules', name, 'package.json'].join(path_1.sep)}`;
                            const resolved = path_1.resolve(process.cwd(), file);
                            dir = path_1.dirname(resolved);
                            // eslint-disable-next-line import/no-dynamic-require
                            pkg = require(resolved);
                        }
                        catch (err) {
                            if (err.code === 'MODULE_NOT_FOUND')
                                return null;
                            throw err;
                        }
                        // use pkg.svelte
                        if (parts.length === 0 && pkg.svelte) {
                            return {
                                path: path_1.resolve(dir, pkg.svelte),
                                pluginName: 'esbuild-plugin-elderjs',
                            };
                        }
                        return null;
                    });
                }
                build.onResolve({ filter: /\.svelte$/ }, ({ path, importer, resolveDir }) => {
                    const importee = path_1.resolve(resolveDir, path);
                    rollupPlugin_1.resolveFn(importee, importer);
                    return {};
                });
                build.onResolve({ filter: /\.css$/ }, ({ path, importer, resolveDir }) => {
                    const importee = path_1.resolve(resolveDir, path);
                    rollupPlugin_1.resolveFn(importee, importer);
                    return { path: importee };
                });
                build.onLoad({ filter: /\.css$/ }, async ({ path }) => {
                    rollupPlugin_1.loadCss(path);
                    return {
                        contents: undefined,
                    };
                });
                build.onLoad({ filter: /\.svelte$/ }, async ({ path }) => {
                    const code = await fs_1.promises.readFile(path, 'utf-8');
                    const { output, warnings } = await rollupPlugin_1.transformFn({
                        svelteConfig,
                        elderConfig,
                        type,
                    })(code, path);
                    const out = {
                        contents: output.code,
                        warnings: type === 'ssr' ? warnings.map((w) => convertWarning(code, w, 'warning')).filter((w) => w) : [],
                    };
                    return out;
                });
                build.onEnd(async () => {
                    if (type === 'ssr') {
                        const s = Date.now();
                        const r = await rollupPlugin_1.minifyCss('all', elderConfig);
                        console.log(`>>>> minifying css and adding sourcemaps took ${Date.now() - s}ms`);
                        const hash = md5(r.styles);
                        const svelteCss = path_1.resolve(elderConfig.$$internal.distElder, `.${path_1.sep}assets${path_1.sep}svelte-${hash}.css`);
                        if (process.env.NODE_ENV !== 'production' || process.env.NODE_ENV !== 'production') {
                            const sourceMapFileRel = `/${path_1.relative(elderConfig.distDir, path_1.resolve(elderConfig.$$internal.distElder, `${svelteCss}.map`))}`;
                            r.styles = `${r.styles}\n /*# sourceMappingURL=${sourceMapFileRel} */`;
                        }
                        fs_extra_1.default.outputFileSync(svelteCss, r.styles);
                        if (r.sourceMap) {
                            fs_extra_1.default.outputFileSync(`${svelteCss}.map`, r.sourceMap.toString());
                        }
                    }
                });
            }
            catch (e) {
                console.error(e);
            }
        },
    };
}
exports.default = esbuildPluginSvelte;
