/// <reference types="node" />
import { Plugin } from 'rollup';
import { CompileOptions } from 'svelte/types/compiler/interfaces';
import { ChildProcess } from 'child_process';
import { SettingsOptions } from '../utils/types';
export declare type RollupCacheElder = {
    [name: string]: Set<string>;
};
export declare const encodeSourceMap: (map: any) => string;
export declare const cssFilePriority: (pathStr: any) => 1 | 0 | 2 | 3 | 6;
export declare const getDependencies: (file: any) => any[];
export declare const getCompilerOptions: ({ type }: {
    type: any;
}) => CompileOptions;
export declare function transformFn({ svelteConfig, elderConfig, type, }: {
    svelteConfig: any;
    elderConfig: SettingsOptions;
    type: 'ssr' | 'client';
}): (code: any, id: any) => Promise<any>;
export declare function logDependency(importee: any, importer: any): RollupCacheElder;
export declare function getDependencyCache(): RollupCacheElder;
export declare function resetDependencyCache(): void;
export declare function resolveFn(importee: any, importer: any): string;
export declare const sortCss: (css: any) => any;
export declare function loadCss(id: any): string;
export declare const getCssFromCache: (arr: string[] | 'all') => [string, string][];
export declare function minifyCss(dependencies: string[] | 'all', elderConfig: SettingsOptions): Promise<any>;
export declare const devServer: ({ elderConfig, forceStart, }: {
    elderConfig: SettingsOptions;
    forceStart: boolean;
}) => {
    startWatcher: () => void;
    childProcess: ChildProcess;
    startOrRestartServer: (count?: number) => void;
};
export interface IElderjsRollupConfig {
    type: 'ssr' | 'client';
    svelteConfig: any;
    elderConfig: SettingsOptions;
    startDevServer?: boolean;
}
export default function elderjsRollup({ elderConfig, svelteConfig, type, startDevServer, }: IElderjsRollupConfig): Partial<Plugin>;
