"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSSRConfig = exports.createBrowserConfig = void 0;
const plugin_node_resolve_1 = require("@rollup/plugin-node-resolve");
const plugin_commonjs_1 = __importDefault(require("@rollup/plugin-commonjs"));
const rollup_plugin_terser_1 = require("rollup-plugin-terser");
const rollup_plugin_babel_1 = __importDefault(require("rollup-plugin-babel"));
const rollup_plugin_multi_input_1 = __importDefault(require("rollup-plugin-multi-input"));
const plugin_replace_1 = __importDefault(require("@rollup/plugin-replace"));
const plugin_json_1 = __importDefault(require("@rollup/plugin-json"));
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_defaultsdeep_1 = __importDefault(require("lodash.defaultsdeep"));
const index_1 = require("../index");
const validations_1 = require("../utils/validations");
const getPluginLocations_1 = __importDefault(require("../utils/getPluginLocations"));
const rollupPlugin_1 = __importDefault(require("./rollupPlugin"));
const normalizePrefix_1 = __importDefault(require("../utils/normalizePrefix"));
const production = process.env.NODE_ENV === 'production' || !process.env.ROLLUP_WATCH;
function createBrowserConfig({ input, output, multiInputConfig, svelteConfig, replacements = {}, elderConfig, startDevServer = false, }) {
    const toReplace = {
        'process.env.componentType': "'browser'",
        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
        ...replacements,
    };
    const config = {
        cache: true,
        treeshake: production,
        input,
        output,
        plugins: [
            plugin_replace_1.default(toReplace),
            plugin_json_1.default(),
            rollupPlugin_1.default({ svelteConfig, type: 'client', elderConfig, startDevServer }),
            plugin_node_resolve_1.nodeResolve({
                browser: true,
                dedupe: ['svelte'],
                preferBuiltins: true,
                rootDir: process.cwd(),
            }),
            plugin_commonjs_1.default({ sourceMap: !production }),
        ],
        watch: {
            chokidar: {
                usePolling: process.platform !== 'darwin',
            },
        },
    };
    // bundle splitting.
    if (multiInputConfig) {
        config.plugins.unshift(multiInputConfig);
    }
    // ie11 babel
    // if is production let's babelify everything and minify it.
    if (production) {
        config.plugins.push(rollup_plugin_babel_1.default({
            extensions: ['.js', '.mjs', '.cjs', '.html', '.svelte'],
            include: ['node_modules/**', 'src/**'],
            exclude: ['node_modules/@babel/**'],
            runtimeHelpers: true,
        }));
        // terser on prod
        config.plugins.push(rollup_plugin_terser_1.terser());
    }
    return config;
}
exports.createBrowserConfig = createBrowserConfig;
function createSSRConfig({ input, output, svelteConfig, replacements = {}, multiInputConfig, elderConfig, startDevServer = false, }) {
    const toReplace = {
        'process.env.componentType': "'server'",
        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
        ...replacements,
    };
    const config = {
        cache: true,
        treeshake: production,
        input,
        output,
        plugins: [
            plugin_replace_1.default(toReplace),
            plugin_json_1.default(),
            rollupPlugin_1.default({ svelteConfig, type: 'ssr', elderConfig, startDevServer }),
            plugin_node_resolve_1.nodeResolve({
                browser: false,
                dedupe: ['svelte'],
            }),
            plugin_commonjs_1.default({ sourceMap: true }),
            production && rollup_plugin_terser_1.terser(),
        ],
        watch: {
            chokidar: {
                usePolling: !/^(win32|darwin)$/.test(process.platform),
            },
        },
    };
    // if we are bundle splitting include them.
    if (multiInputConfig) {
        config.plugins.unshift(multiInputConfig);
    }
    return config;
}
exports.createSSRConfig = createSSRConfig;
function getRollupConfig(options) {
    const defaultOptions = validations_1.getDefaultRollup();
    const { svelteConfig, replacements, startDevServer } = lodash_defaultsdeep_1.default(options, defaultOptions);
    const elderConfig = index_1.getElderConfig();
    const relSrcDir = elderConfig.srcDir.replace(elderConfig.rootDir, '').substr(1);
    console.log(`Elder.js using rollup in ${production ? 'production' : 'development'} mode.`);
    const configs = [];
    // Add ElderJs Peer deps to public if they exist.
    [
        ['./node_modules/intersection-observer/intersection-observer.js', './_elderjs/static/intersection-observer.js'],
    ].forEach((dep) => {
        if (!fs_extra_1.default.existsSync(path_1.default.resolve(elderConfig.rootDir, dep[0]))) {
            throw new Error(`Elder.js peer dependency not found at ${dep[0]}`);
        }
        const prefix = normalizePrefix_1.default(elderConfig.prefix);
        configs.push({
            input: dep[0],
            output: [
                {
                    file: path_1.default.resolve(prefix ? path_1.default.join(elderConfig.distDir, prefix) : elderConfig.distDir, dep[1]),
                    format: 'iife',
                    name: dep[1],
                    plugins: [rollup_plugin_terser_1.terser()],
                },
            ],
        });
    });
    const { paths: pluginPaths } = getPluginLocations_1.default(elderConfig);
    const pluginGlobs = pluginPaths.map((plugin) => `${plugin}*.svelte`);
    configs.push(createSSRConfig({
        input: [
            `${relSrcDir}/layouts/*.svelte`,
            `${relSrcDir}/routes/**/*.svelte`,
            `${relSrcDir}/components/**/*.svelte`,
            ...pluginGlobs,
        ],
        output: {
            dir: elderConfig.$$internal.ssrComponents,
            format: 'cjs',
            exports: 'auto',
            sourcemap: !production ? 'inline' : false,
        },
        multiInputConfig: rollup_plugin_multi_input_1.default({
            relative: 'src/',
        }),
        svelteConfig,
        replacements,
        elderConfig,
        startDevServer,
    }));
    const clientComponents = [...glob_1.default.sync(`${relSrcDir}/components/**/*.svelte`), ...pluginGlobs];
    if (clientComponents.length > 0) {
        // keep things from crashing of there are no components
        configs.push(createBrowserConfig({
            input: [`${relSrcDir}/components/**/*.svelte`, ...pluginGlobs],
            output: [
                {
                    dir: elderConfig.$$internal.clientComponents,
                    sourcemap: !production ? 'inline' : false,
                    format: 'esm',
                    entryFileNames: '[name].[hash].js',
                },
            ],
            multiInputConfig: rollup_plugin_multi_input_1.default({
                relative: 'src/',
            }),
            svelteConfig,
            replacements,
            elderConfig,
            startDevServer,
        }));
    }
    return configs;
}
exports.default = getRollupConfig;
